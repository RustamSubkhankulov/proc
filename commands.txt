DEF_CMD_(0, HLT, 0, 136272956, 
{
    int ret = stack_dtor(&procstruct->Stack);
    if (ret == -1)
        return -1;

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);
})

DEF_CMD_(0, ADD, 1, 4089307820,
{
    elem_t first_val = 0;
    get_argument_from_stack(first_val);

    elem_t second_val = 0;
    get_argument_from_stack(second_val);

    elem_t result = first_val + second_val;
    push_argument_to_stack(result);

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);
})

DEF_CMD_(0, SUB, 2, 4160544333,
{
    elem_t first_val = 0;
    get_argument_from_stack(first_val);

    elem_t second_val = 0;
    get_argument_from_stack(second_val);

    elem_t result = second_val - first_val;
    push_argument_to_stack(result);

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);
})

DEF_CMD_(0, MUL, 3, 4176901080, 
{
    elem_t first_val = 0;
    get_argument_from_stack(first_val);

    elem_t second_val = 0;
    get_argument_from_stack(second_val);

    elem_t result = second_val * first_val;

    push_argument_to_stack(result);

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);   
})

DEF_CMD_(0, DIV, 4, 98149758, 
{
    elem_t divider = 0;
    get_argument_from_stack(divider);

    elem_t dividend = 0;
    get_argument_from_stack(dividend);

    check_divider_is_zero(divider);
    
    elem_t result = dividend / divider;
    push_argument_to_stack(result);

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);  
})

DEF_CMD_(1, PUSH, 5, 1815514390, 
{
    procstruct->ip++;
    procstruct_ip_check(procstruct);

    elem_t* value_ptr = 0;
    get_address(value_ptr);

    int err = stack_push(&procstruct->Stack, *value_ptr);
    if (err == -1)
    return -1;

    procstruct->command_ct++;
})

DEF_CMD_(1, POP, 6, 3218261149, 
{
    procstruct->ip++;
    procstruct_ip_check(procstruct);

    elem_t* value_ptr = 0;
    get_address(value_ptr);

    int err = 0;
    *value_ptr = stack_pop(&procstruct->Stack, &err);
    
    if (err == -1)
        return -1;

    procstruct->command_ct++;
})

DEF_CMD_(0, OUT, 7, 1023240496, 
{
    elem_t value = 0;
    get_argument_from_stack(value);

    print_value(value);

    procstruct->command_ct;

    procstruct->ip++;
    procstruct_ip_check(procstruct);  
})

DEF_CMD_(0, IN, 8, 955208603, 
{
    elem_t value = 0;
    scan_value(value);

    push_argument_to_stack(value);

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);
})

DEF_CMD_(0, DUMP,  9, 4210507735, 
{
    int ret = processor_dump(procstruct);
    if (ret == -1)
        return -1;

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);
})

DEF_CMD_(0, RET,  10, 449239908, 
{
    elem_t value = 0;
    get_argument_from_stack(value);

    move_ip_to_dest((int)value);

    procstruct->command_ct++;
})

DEF_CMD_(0, POW,  12, 3916815338, 
{
    elem_t exp = 0;
    get_argument_from_stack(exp);

    elem_t base = 0;
    get_argument_from_stack(base);

    elem_t result = powf(base, exp);
    push_argument_to_stack(result);

    procstruct->command_ct++;

    procstruct->ip++;
    procstruct_ip_check(procstruct);    
})
